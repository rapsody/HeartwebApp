<?php
Class Forms {
    
    private $objFormModel;

    public function __construct()
    {
        include ROOT_DIR.'models'.DS.__class__.'.class.php';
        $class_name = __class__.'_Model';
        $this->objFormModel = new $class_name;
    }
        
    public function getForm($input) 
    {
		try{
            if (!isset($input[2]) ) throw new Exception ("Invalid Input");
            
            libxml_use_internal_errors(true);
                
            // convert the xml into Object
            $inputObject = simplexml_load_string(
                                    $input, 
                                    "SimpleXMLElement" , 
                                    LIBXML_NOCDATA
                                );
            
                                
            if (!$inputObject) {
                
                // @var Array to store the error messages
                $errors = array ();
                
                // loop through the errors and store the errors in $errors
                foreach ( libxml_get_errors() as $e ) 
                    $errors[] = $e -> message;
            
                // @var String Errors are joined by a newline
                $errors = join ("\n", $errors);
                
                // throw the error
                throw new Exception ($errors);
            } // if !$inputObject

             $forms = $this->objFormModel->getForm($inputObject->userkey, $inputObject->formid);
	        if(count($forms) > 0)
	        {
	        	return $forms;
	        }
	        else
	        {
	        	throw new Exception ("No Form Exists");
	        }
            
        }
        catch (Exception $e) {
            return $this -> setError($e -> getMessage());
        }
		
	
    }
    
    //@todo no clarity yet
 	public function getForms($input) 
    {
		try{
            if (!isset($input[2]) ) throw new Exception ("Invalid Input");
            
            libxml_use_internal_errors(true);
                
            // convert the xml into Object
            $inputObject = simplexml_load_string(
                                    $input, 
                                    "SimpleXMLElement" , 
                                    LIBXML_NOCDATA
                                );
            
                                
            if (!$inputObject) {
                
                // @var Array to store the error messages
                $errors = array ();
                
                // loop through the errors and store the errors in $errors
                foreach ( libxml_get_errors() as $e ) 
                    $errors[] = $e -> message;
            
                // @var String Errors are joined by a newline
                $errors = join ("\n", $errors);
                
                // throw the error
                throw new Exception ($errors);
            } // if !$inputObject
			
			if(!isset($inputObject->userkey) || $inputObject->userkey)
                throw new Exception ('Invalid Userkey.');
				
            $forms = $this->objFormModel->getForms($inputObject->userkey);
	        
			if(count($forms) > 0)
	        {
	        	return $forms;
	        }
	        else
	        {
	        	throw new Exception ("No Form Exists");
	        }
            
        }
        catch (Exception $e) {
            return $this -> setError($e -> getMessage());
        }
    	
    }

    public function createForm($input) 
    {
     try{
            if (!isset($input[2]) ) throw new Exception ("Invalid Input");
            
            libxml_use_internal_errors(true);
                
            // convert the xml into Object
            $inputObject = simplexml_load_string(
                                    $input, 
                                    "SimpleXMLElement" , 
                                    LIBXML_NOCDATA
                                );
            
                                
            if (!$inputObject) {
                
                // @var Array to store the error messages
                $errors = array ();
                
                // loop through the errors and store the errors in $errors
                foreach ( libxml_get_errors() as $e ) 
                    $errors[] = $e -> message;
            
                // @var String Errors are joined by a newline
                $errors = join ("\n", $errors);
                
                // throw the error
                throw new Exception ($errors);
            } // if !$inputObject

            $usergroup = $this -> objFormModel -> createForm($inputObject);
            
            if ($usergroup['id'] == '0') {
                throw new Exception($usergroup['name']);
            }
            else
            {
                $returnValue['status'] = 'OK';
            }
            
            return $returnValue;
            
        }
        catch (Exception $e) {
            return $this -> setError($e -> getMessage());
        }
    }
    
	
 	public function searchForms($input) 
    {
		try{
            if (!isset($input[2]) ) throw new Exception ("Invalid Input");
            
            libxml_use_internal_errors(true);
                
            // convert the xml into Object
            $inputObject = simplexml_load_string(
                                    $input, 
                                    "SimpleXMLElement" , 
                                    LIBXML_NOCDATA
                                );
            
                                
            if (!$inputObject) {
                
                // @var Array to store the error messages
                $errors = array ();
                
                // loop through the errors and store the errors in $errors
                foreach ( libxml_get_errors() as $e ) 
                    $errors[] = $e -> message;
            
                // @var String Errors are joined by a newline
                $errors = join ("\n", $errors);
                
                // throw the error
                throw new Exception ($errors);
            } // if !$inputObject

   		 	$forms = $this->objFormModel->searchForms($inputObject);
	        if(count($forms) > 0)
	        {
	        	 return $forms;
	        }
	        else
	        {
	        	throw new Exception ("Data Not Available");
	        }
            
           
            
        }
        catch (Exception $e) {
            return $this -> setError($e -> getMessage());
        }
    }
    
    public function setError($error) {
        $this -> errorMessages[] = $error;
        return false;
    }
 
}