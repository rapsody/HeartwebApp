<?php
Class Groups {
    
    private $objGroupModel;

    public function __construct()
    {
        include ROOT_DIR.'models'.DS.__class__.'.class.php';
        $class_name = __class__.'_Model';
        $this->objGroupModel = new $class_name;
    }
        
    public function getUserGroups($input) 
    {
		try{
            if (!isset($input[2]) ) throw new Exception ("Invalid Input");
            
            libxml_use_internal_errors(true);
                
            // convert the xml into Object
            $inputObject = simplexml_load_string(
                                    $input, 
                                    "SimpleXMLElement" , 
                                    LIBXML_NOCDATA
                                );
            
                                
            if (!$inputObject) {
                
                // @var Array to store the error messages
                $errors = array ();
                
                // loop through the errors and store the errors in $errors
                foreach ( libxml_get_errors() as $e ) 
                    $errors[] = $e -> message;
            
                // @var String Errors are joined by a newline
                $errors = join ("\n", $errors);
                
                // throw the error
                throw new Exception ($errors);
            } // if !$inputObject
            

            if ( !isset ($inputObject -> userid) ){
                throw new Exception ('Please fill all the mandatory feilds');
            } 
            
			$groups = $this->objGroupModel->loadUserGroups($inputObject -> userid);
			return $groups;
        }
        catch (Exception $e) {
            return $this -> setError($e -> getMessage());
        }
		
       
    }

    
    public function createUserGroups($input) 
    {
     try{
            if (!isset($input[2]) ) throw new Exception ("Invalid Input");
            
            libxml_use_internal_errors(true);
                
            // convert the xml into Object
            $inputObject = simplexml_load_string(
                                    $input, 
                                    "SimpleXMLElement" , 
                                    LIBXML_NOCDATA
                                );
            
                                
            if (!$inputObject) {
                
                // @var Array to store the error messages
                $errors = array ();
                
                // loop through the errors and store the errors in $errors
                foreach ( libxml_get_errors() as $e ) 
                    $errors[] = $e -> message;
            
                // @var String Errors are joined by a newline
                $errors = join ("\n", $errors);
                
                // throw the error
                throw new Exception ($errors);
            } // if !$inputObject
            
            //@todo need to validate as per client requirement.
            if ( 
                !isset ($inputObject -> groupname) ||
                !isset ($inputObject -> groupsubject) || 
                !isset ($inputObject -> grouplocation) ||
                !isset ($inputObject -> groupprivate)
                
            ){
            
            // throw error to fill all feilds
                throw new Exception (
                        'Please fill all the mandatory feilds'
                );
            }
            if($this->groupExists($inputObject->groupname))
            {
                throw new Exception (
                        'Group Name exists.'
                );
            }

            
            
            
            $usergroup = $this -> objGroupModel -> createUserGroup($inputObject);
            
            if ($usergroup['id'] == '0') {
                throw new Exception($usergroup['name']);
            }
            else
            {
                $returnValue['status'] = 'OK';
            }
            
            return $returnValue;
            
        }
        catch (Exception $e) {
            return $this -> setError($e -> getMessage());
        }
    }
    
    private function groupExists($groupname)
    {
        return $this -> objGroupModel -> checkGroupExistence($groupname);
    }
	
	// Used to Join , Unjoin , Approve and Reject the Users.
	public function doGroupAction($input)
    {
	     try{
            if (!isset($input[2]) ) throw new Exception ("Invalid Input");
            
            libxml_use_internal_errors(true);
                
            // convert the xml into Object
            $inputObject = simplexml_load_string(
                                    $input, 
                                    "SimpleXMLElement" , 
                                    LIBXML_NOCDATA
                                );
            
                                
            if (!$inputObject) {
                
                // @var Array to store the error messages
                $errors = array ();
                
                // loop through the errors and store the errors in $errors
                foreach ( libxml_get_errors() as $e ) 
                    $errors[] = $e -> message;
            
                // @var String Errors are joined by a newline
                $errors = join ("\n", $errors);
                
                // throw the error
                throw new Exception ($errors);
            } // if !$inputObject
            
            //@todo need to validate as per client requirement.
            if ( 
                !isset ($inputObject -> auth) ||
                !isset ($inputObject -> groupid) ||
                !isset ($inputObject -> mode)
            ){
            
            // throw error to fill all feilds
                throw new Exception (
                        'Invalid Parameters'
                );
            }
            
            if($inputObject -> mode == 'join') {
            
            	$result = $this -> objGroupModel -> groupJoin($inputObject);
            	
            } else if($inputObject -> mode == 'unjoin') {

            	$result = $this -> objGroupModel -> groupUnjoin($inputObject);
            	
            } else if($inputObject -> mode == 'approve') {

            	$result = $this -> objGroupModel -> groupApprove($inputObject);
            	
            } else if($inputObject -> mode == 'reject') {
            
            	$result = $this -> objGroupModel -> groupReject($inputObject);
            	
            } else {
            	throw new Exception (
                        'Invalid Action Type.'
                );
	     	}
	     	
            
            if (count($result) > 0) {
                return $result;
            }
            else
            {
                throw new Exception('Error while Processing.');
            }
 
        }
        catch (Exception $e) {
            return $this -> setError($e -> getMessage());
        }
    }
    
    // Latest Public groups.
    public function latestGroups()
	{
    	return $this -> objGroupModel -> getLatestGroups();
    }
        
    // User Request For Groups Pending Approved Rejected Status.
    public function groupRequestStatus($input)
    {
      try{
            if (!isset($input[2]) ) throw new Exception ("Invalid Input");
            
            libxml_use_internal_errors(true);
                
            // convert the xml into Object
            $inputObject = simplexml_load_string(
                                    $input, 
                                    "SimpleXMLElement" , 
                                    LIBXML_NOCDATA
                                );
            
                                
            if (!$inputObject) {
                
                // @var Array to store the error messages
                $errors = array ();
                
                // loop through the errors and store the errors in $errors
                foreach ( libxml_get_errors() as $e ) 
                    $errors[] = $e -> message;
            
                // @var String Errors are joined by a newline
                $errors = join ("\n", $errors);
                
                // throw the error
                throw new Exception ($errors);
            } // if !$inputObject
            
            //@todo need to validate as per client requirement.
            if ( 
                !isset ($inputObject -> auth)
            ){
            
            // throw error to fill all feilds
                throw new Exception (
                        'Invalid Parameters'
                );
            }
            
            $result = $this -> objGroupModel -> getGroupRequestStatus($inputObject);
            
	     	if (count($result) > 0) {
                return $result;
            }
            else
            {
                throw new Exception('Error while Processing.');
            }
 
        }
        catch (Exception $e) {
            return $this -> setError($e -> getMessage());
        }
    }
        
 	// User Request For My Groups Pending Approved Rejected Status.
    public function myGroupRequestStatus($input)
    {
		try
		{
            if (!isset($input[2]) ) throw new Exception ("Invalid Input");
            
            libxml_use_internal_errors(true);
                
            // convert the xml into Object
            $inputObject = simplexml_load_string(
                                    $input, 
                                    "SimpleXMLElement" , 
                                    LIBXML_NOCDATA
                                );
            
                                
            if (!$inputObject) {
                
                // @var Array to store the error messages
                $errors = array ();
                
                // loop through the errors and store the errors in $errors
                foreach ( libxml_get_errors() as $e ) 
                    $errors[] = $e -> message;
            
                // @var String Errors are joined by a newline
                $errors = join ("\n", $errors);
                
                // throw the error
                throw new Exception ($errors);
            } // if !$inputObject
            
            //@todo need to validate as per client requirement.
            if ( 
                !isset ($inputObject -> auth)
            ){
            
            // throw error to fill all feilds
                throw new Exception (
                        'Invalid Parameters'
                );
            }
            
            $result = $this -> objGroupModel -> getMyGroupRequestStatus($inputObject);
            
	     	if (count($result) > 0) {
                return $result;
            }
            else
            {
                throw new Exception('Error while Processing.');
            }
 
        }
        catch (Exception $e) {
            return $this -> setError($e -> getMessage());
        }	
    }
	
    public function setError($error) {
        $this -> errorMessages[] = $error;
        return false;
    }
 
}